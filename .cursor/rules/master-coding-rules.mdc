description: "Bridging Trust AI – Website master coding rules (Next.js 15.4.x, Tailwind 4.1, npm). Quality-first, server components by default, enforced patterns for repeatable excellence."
globs:

* "\*\*/\*"
  alwaysApply: true

---

<!-- ========================================================= -->

<!--  Master .cursorrules | Bridging Trust AI – Website only   -->

<!--  Next.js 15.4.x | Tailwind 4.1 | npm | Vitest | Playwright -->

<!--  Last updated: 2025-09-03 (America/Chicago)               -->

<!-- ========================================================= -->

This document is the **single source of truth** for the Bridging Trust AI **website** codebase. It preserves the original spirit (simplicity, security, clarity) and adds firm **quality gates** so generated code does not require cleanup later.

---

# 0  Scope & Enforcement

* Applies to this website repo only (Next.js App Router).
* Enforced by **Cursor**, **ESLint**, **TypeScript strict**, **Vitest/Playwright**, and CI checks.
* Cursor must follow all **Code-Gen Guardrails** herein when creating or editing files.

---

# 1  Core Principles

| Principle                | What it means in practice                                                                                             |
| ------------------------ | --------------------------------------------------------------------------------------------------------------------- |
| **Quality First**        | Generate code that compiles, passes lint & tests, and meets accessibility/performance budgets **in the first draft**. |
| **Server-by-Default**    | Prefer **Server Components**; use client islands only for interactive/animated sections (e.g., globe).                |
| **Simplicity & Clarity** | Small files (≤150 lines app code), clear naming, no unnecessary abstraction, no dead code.                            |
| **DRY & Consistency**    | Reuse shared utilities/components; keep styles in Tailwind classes; no inline styles.                                 |
| **Secure-by-Design**     | Respect CSP/SRI, sanitize inputs/outputs, avoid dangerous HTML; parameterize everything.                              |
| **Iterate Safely**       | Behind flags when risky; do not regress tests, a11y, or performance budgets.                                          |

---

# 2  Project Structure (authoritative)

```
root/
├─ app/                 # App Router: pages, layouts, route handlers (server-first)
├─ src/
│  ├─ components/       # Shared UI (server-first). Client islands in subfolders.
│  ├─ lib/              # Utilities, fetching, caching, logger, schemas (zod)
│  └─ types/            # Global TS types & interfaces
├─ public/              # Static assets (images optimized or via next/image)
├─ tests/               # Vitest unit & Playwright e2e/visual
├─ docs/                # architecture notes, ADRs, promptlog.md
└─ .cursorrules
```

* **Path aliases** (must use): `@/components`, `@/lib`, `@/types`.
* **File size**: soft cap **150 lines** (app code) / **250** (infra/config). Cursor warns & proposes refactor above caps.
* **Docs**: Every public function/component gets a terse JSDoc. Major features add/update an ADR.

---

# 3  Technology Locks

* **Next.js**: lock to **15.4.x**.
* **TypeScript**: `"strict": true`. Disallow `any`; if unavoidable, isolate and justify in a comment.
* **Tailwind**: v4.1.x with `prettier-plugin-tailwindcss@0.6.11`. No inline styles.
* **Package manager**: **npm** (keep `package-lock.json` authoritative).

---

# 4  Cursor Code-Gen Guardrails (Do/Don’t)

**Always do**

1. **Server First**: Pages/components default to server. For interactivity, create a focused **client island**:

   ```tsx
   'use client';
   import { useEffect, useState } from 'react';
   export function GlobeCanvas(props: Props) { /* island only */ }
   ```
2. **Page pattern**:

   ```tsx
   // app/(segment)/page.tsx
   import { Suspense } from 'react';
   export const metadata = { title: '...' };
   export default async function Page() { /* fetch + return JSX */ }
   ```
3. **Data fetching**: Use `cache()` helpers or `fetch(..., { next: { revalidate: <seconds> } })`. Choose **static** by default; opt-in to dynamic.
4. **SEO**: Use `export const metadata`, canonical URLs, and `robots` as needed.
5. **Error UX**: Provide `error.tsx`, `not-found.tsx`, and `loading.tsx` per route segment.
6. **Styles**: Tailwind utilities only; keep classes sorted (Prettier plugin). Use semantic HTML.
7. **Images/Fonts**: `next/image` and `next/font` (self-host or system stack). No remote untrusted images without allowlist & SRI/CSP.
8. **Forms/APIs**: Validate with **zod**; rate-limit; return typed responses. Respect CSP (no inline scripts).
9. **Testing hooks**: Generate companion unit tests for non-trivial lib functions; add/extend Playwright e2e where UX changes.

**Never do**

* Don’t mark pages client without necessity.
* Don’t use inline styles or unscoped global CSS.
* Don’t introduce `any` types, silent `catch` blocks, or `console.log` in prod paths (use `logger`).
* Don’t fetch in client unless required for live interactivity.
* Don’t ship images or third-party scripts that violate CSP/SRI.

---

# 5  Security & Compliance (website)

* **CSP/SRI**: Already configured in `staticwebapp.config.json`. Cursor must **not** generate patterns that require unsafe inline scripts/styles. Use `next/script` with `strategy` and SRI when external.
* **Inputs/Outputs**: Sanitize untrusted HTML. Never `dangerouslySetInnerHTML` unless vetted & wrapped.
* **Auth & Abuse**: Contact/API routes enforce **zod validation**, header honeypot, per-IP **rate limit**, and **circuit breaker** patterns (keep your Resend flow).
* **Secrets**: Use **Azure SWA secrets** (status quo). No secrets in repo, commits, or logs.
* **Supply chain**: Pin critical deps; dependabot/renovate allowed. No post-install scripts from unknown deps.

---

# 6  Quality Gates (must pass locally & in CI)

* **ESLint**: Include `@typescript-eslint`, `eslint-plugin-security`, `eslint-plugin-jsx-a11y`. No warnings left behind in PRs.
* **Type-check**: `tsc --noEmit` clean.
* **Unit tests (Vitest)**: Co-locate tests. Target coverage keeps a **ratchet**:

  * Current floors: **CI ≥ 30%**, **local ≥ 70%** (lines/branches).
  * **No regression rule**: CI must not drop vs `main` coverage for touched packages. Cursor prefers adding tests to lift coverage.
* **E2E/Visual (Playwright)**: Keep/update **visual baselines** only in PRs explicitly labeled `visual-accept`.
* **Accessibility**: `eslint-plugin-jsx-a11y` clean; add **axe** checks in Playwright where feasible.
* **Performance budgets (Lighthouse CI)**: Home & key pages must meet:

  * **LCP ≤ 2.5s**, **CLS ≤ 0.1**, **INP ≤ 200ms**, **Perf score ≥ 90** on CI profile.
  * No budget regressions vs `main` for changed pages.

> If a generated change risks breaking budgets, Cursor must propose optimizations (code-split, reduce JS, image optimization) before emitting final code.

---

# 7  Patterns & Snippets (authoritative)

## 7.1 Components

```tsx
interface Props { /* typed props */ }
/** Brief doc of what and why */
export function SectionHeading({ children }: Props) {
  return <h2 className="text-balance text-2xl font-semibold tracking-tight">{children}</h2>;
}
```

* **Export named** components from `@/components/...`. Pages default-export `Page`.
* Client islands live under `@/components/client/*` with `'use client'` at top.

## 7.2 Route Handlers / API

```tsx
// app/api/contact/route.ts
import { z } from 'zod';
import { rateLimit } from '@/lib/rate-limit';
import { sendEmail } from '@/lib/resend';
const Schema = z.object({ name: z.string().min(1), email: z.string().email(), message: z.string().min(10) });

export async function POST(req: Request) {
  await rateLimit('contact', req);                 // per-IP
  const body = await req.json();
  const parsed = Schema.safeParse(body);
  if (!parsed.success) return Response.json({ error: 'Invalid' }, { status: 400 });
  await sendEmail(parsed.data);                    // includes circuit breaker & retries
  return Response.json({ ok: true });
}
```

* Every handler: schema validate → rate-limit → action → typed JSON.
* No untyped `any`, no silent catch; log with `logger.error`.

## 7.3 Data fetching & caching

* Prefer **build-time** or **revalidate** caching:

  * Static section: `export const revalidate = 3600;`
  * Dynamic opt-in: `export const dynamic = 'force-dynamic'` (justify in comment).

## 7.4 SEO & Metadata

* Use `export const metadata`. Provide canonical, open-graph, twitter, and `robots`.
* Add `sitemap.xml` and `robots.txt` route handlers if content structure changes.

---

# 8  Accessibility (A11y) Rules

* All images have `alt`. Decorative icons: `aria-hidden="true"`.
* Interactive elements are **buttons/links**, not `<div>`s with handlers.
* Maintain heading order (`h1` → `h2` → …). Ensure focus states are visible.
* Color contrast meets **WCAG AA**. Tailwind tokens only (no ad-hoc hex unless added to theme).

---

# 9  Performance & UX

* **Images**: Use appropriate sizes, `sizes` prop, and modern formats. Avoid layout shifts (`fill` with container constraints).
* **JS budget**: Keep route JS under reasonable limits; aggressively code-split client islands (e.g., globe).
* **Fonts**: Prefer system stack or self-hosted via `next/font`. No render-blocking third-party fonts.

---

# 10  Workflow & Git Hygiene

* **Branching**: Trunk-based; short-lived feature branches; preview builds on PRs.
* **Commits**: Conventional commits (`feat`, `fix`, `refactor`, etc.). Enforce with commitlint/Husky.
* **CI must** run: lint → type-check → unit → e2e/visual → lighthouse → build.
* **No failing checks** may be merged. If budgets/tests are brittle, fix the cause rather than muting the check.

---

# 11  Documentation Automation

* Append to `docs/promptlog.md` each time Cursor contributes non-trivial code (timestamp + brief context).
* ADRs for material architectural shifts (naming `docs/adr/NNNN-title.md`).

---

# 12  Azure Static Web Apps (deployment norms)

* Keep `staticwebapp.config.json` authoritative for **CSP**, headers, routes, and API.
* Env/secrets via SWA; **never** in repo.
* Artifacts: upload Playwright/Lighthouse results for traceability on each PR.

---

# 13  Cursor Enforcement Summary

Cursor will:

* Prefer **server components**; only create client components for true interactivity.
* Refuse to emit inline styles, untyped code, or pages lacking `metadata`/`error.tsx`/`loading.tsx` where appropriate.
* Keep files under size caps; propose refactors if exceeded.
* Generate/update tests alongside code changes to maintain **coverage ratchet**.
* Respect CSP/SRI and avoid patterns requiring unsafe inline scripts.
* Use path aliases and Tailwind class sorting consistently.

---

# 14  Quick Next.js 15.4.x Cheatsheet (for code-gen)

| Scenario            | Required pattern                                                                                |
| ------------------- | ----------------------------------------------------------------------------------------------- |
| Server page w/ data | `export default async function Page(){/* await fetch */}` + `revalidate` as needed              |
| Client island       | `'use client'` + hooks only where necessary                                                     |
| Metadata            | `export const metadata = { title, description, alternates: { canonical }, openGraph, twitter }` |
| Error boundary      | `app/(seg)/error.tsx` with reset logic                                                          |
| Route handler       | zod validate → rate-limit → action → typed `Response.json`                                      |
| Image               | `<Image src="/..." width={...} height={...} alt="..."/>` or `fill` with constrained parent      |

---

*End of Bridging Trust AI website master coding rules*
