name: Azure Static Web Apps Deployment

# =============================================================================
# COST-OPTIMIZED GITHUB ACTIONS WORKFLOW
# =============================================================================
# This workflow uses the new quality gate system (ci/g_master.sh) to ensure
# code quality while minimizing GitHub Actions costs through local-first testing
# =============================================================================

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, closed]

# Security: Minimal permissions
permissions:
  contents: read
  id-token: write  # For Azure OIDC
  pull-requests: read

# Limit concurrent runs to save costs
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # =============================================================================
  # QUALITY GATE VALIDATION JOB
  # =============================================================================
  # Runs comprehensive quality gates using ci/g_master.sh
  # Local testing should have caught issues, but this provides final validation
  quality-gate-validation:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Strict timeout to control costs
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: false  # Skip submodules to save time
          lfs: false        # Skip LFS to save bandwidth

      - name: Setup Node.js (cached)
        uses: actions/setup-node@v4
        with:
          node-version: '20.19.1'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: |
          # Install all dependencies needed for build
          npm ci --silent
          echo "‚úÖ Dependencies installed"

      - name: Setup security tools
        run: |
          # Install security tools
          sudo apt-get update -qq && sudo apt-get install -y jq
          # Install gitleaks for secret scanning
          curl -sSfL https://github.com/gitleaks/gitleaks/releases/download/v8.18.0/gitleaks_8.18.0_linux_x64.tar.gz | tar -xz -C /usr/local/bin
          chmod +x /usr/local/bin/gitleaks
          echo "‚úÖ Security tools installed"

      - name: Setup quality gate system
        run: |
          # Ensure quality gate scripts are executable
          chmod +x ci/g_*.sh
          echo "‚úÖ Quality gate system ready"

      - name: Run quality gates
        run: |
          # Run comprehensive quality gates (local testing should have caught issues)
          echo "üîç Running quality gates..."
          ./ci/g_master.sh --verbose
          echo "‚úÖ All quality gates passed"

      - name: Security scan (always run)
        if: always()
        run: |
          # Always run security scan even if other gates fail
          echo "üîç Running security scan..."
          ./ci/g_security.sh
          echo "‚úÖ Security scan completed"

  # =============================================================================
  # AZURE DEPLOYMENT JOB
  # =============================================================================
  # Deploy to Azure Static Web Apps with minimal overhead
  deploy-to-azure:
    needs: quality-gate-validation
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Strict timeout for deployment
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: false
          lfs: false

      - name: Setup Node.js (cached)
        uses: actions/setup-node@v4
        with:
          node-version: '20.19.1'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --silent

      - name: Setup tools and scripts
        run: |
          # Only install jq if needed, skip script setup for deployment
          sudo apt-get update -qq && sudo apt-get install -y jq

      - name: Build for deployment
        run: |
          echo "üèóÔ∏è Building for Azure deployment..."
          rm -rf .next
          # Add cache-busting timestamp to force new deployment
          echo "BUILD_TIMESTAMP=$(date -u +%Y%m%d%H%M%S)" >> $GITHUB_ENV
          npm run build
          echo "‚úÖ Build completed for deployment at $(date -u)"

      - name: Deploy to Azure Static Web Apps
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_BRIDGINGTRUST_WEBSITE }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/"
          api_location: ""
          output_location: ""
          skip_app_build: false
        env:
          NODE_VERSION: "20.19.1"

      - name: Post-deployment verification
        run: |
          echo "‚è≥ Waiting for deployment to stabilize..."
          sleep 30
          echo "‚úÖ Deployment completed"
          echo "üåê Site should be available at Azure Static Web Apps URL"

  # =============================================================================
  # CLEANUP JOB (for PRs)
  # =============================================================================
  cleanup-pr:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Close Pull Request
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_BRIDGINGTRUST_WEBSITE }}
          action: "close"
          app_location: "/"

  # =============================================================================
  # COST MONITORING JOB
  # =============================================================================
  # Track workflow costs and duration
  cost-monitoring:
    if: always()
    needs: [quality-gate-validation, deploy-to-azure]
    runs-on: ubuntu-latest
    timeout-minutes: 2
    
    steps:
      - name: Log workflow metrics
        run: |
          echo "üìä WORKFLOW COST METRICS"
          echo "========================"
          echo "Workflow: ${{ github.workflow }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "Trigger: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Started: $(date -u)"
          echo ""
          echo "üí∞ COST OPTIMIZATION NOTES:"
          echo "- Quality gate system (ci/g_master.sh) for comprehensive validation"
          echo "- Local testing completed before push"
          echo "- Minimal GitHub Actions usage"
          echo "- Production dependencies only"
          echo "- Strict timeouts enforced"
          echo "- Concurrent runs cancelled"
          echo ""
          echo "‚úÖ Cost-optimized workflow with quality gates completed" 