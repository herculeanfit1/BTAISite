name: Automatic Log Analysis for CI Failures

on:
  workflow_run:
    workflows: 
      - "CI/CD Pipeline"
      - "Hybrid Tests"
    types: [completed]

jobs:
  analyze-logs:
    name: Analyze CI/CD Failure Logs
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq openssl unzip
      
      - name: Set up GitHub App private key
        run: |
          echo "${{ secrets.GITHUB_APP_PRIVATE_KEY }}" > github-app-key.pem
          chmod 600 github-app-key.pem
      
      - name: Make scripts executable
        run: |
          chmod +x ./scripts/retrieve-github-logs.sh
          chmod +x ./scripts/find-github-app-installation.sh
      
      - name: Retrieve and analyze logs
        run: |
          ./scripts/retrieve-github-logs.sh \
            --app-id ${{ secrets.GITHUB_APP_ID }} \
            --installation-id ${{ secrets.GITHUB_APP_INSTALLATION_ID }} \
            --owner ${{ github.repository_owner }} \
            --repo ${{ github.repository.name }} \
            --key-path github-app-key.pem \
            --workflow-id ${{ github.event.workflow_run.id }} \
            --debug
      
      - name: Upload log analysis artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ci-log-analysis
          path: github-logs/
          retention-days: 7
      
      - name: Post analysis summary as comment
        if: ${{ github.event.workflow_run.pull_requests[0].number != null }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            try {
              // Get the PR number from the original workflow run
              const prNumber = context.payload.workflow_run.pull_requests[0].number;
              
              // Look for the analysis summary file
              const summaryFiles = [];
              const runsDir = './github-logs';
              if (fs.existsSync(runsDir)) {
                const runDirs = fs.readdirSync(runsDir).filter(item => 
                  fs.statSync(`${runsDir}/${item}`).isDirectory() && item.startsWith('run_')
                );
                
                for (const dir of runDirs) {
                  const summaryPath = `${runsDir}/${dir}/analysis_summary.txt`;
                  if (fs.existsSync(summaryPath)) {
                    summaryFiles.push(summaryPath);
                  }
                }
              }
              
              if (summaryFiles.length === 0) {
                console.log('No analysis summary files found');
                return;
              }
              
              // Read and combine analysis summaries
              let combinedSummary = '## CI Failure Analysis\n\n';
              for (const file of summaryFiles) {
                const summary = fs.readFileSync(file, 'utf8');
                combinedSummary += `### ${file.split('/').pop().replace('_', ' ')}\n\n\`\`\`\n${summary}\n\`\`\`\n\n`;
              }
              
              combinedSummary += '\nThis analysis was generated automatically from workflow logs. For more details, check the workflow artifacts.';
              
              // Post comment to PR
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: combinedSummary
              });
              
              console.log(`Posted analysis summary to PR #${prNumber}`);
            } catch (error) {
              console.error('Error posting analysis summary:', error);
            }
      
      - name: Cleanup private key
        if: always()
        run: rm -f github-app-key.pem 