'use client';

import React, { Suspense, useMemo, useRef, useState, useEffect } from 'react';
import dynamic from 'next/dynamic';
import { Canvas } from '@react-three/fiber';
import { Route } from 'next';
import { useTheme } from 'next-themes';

// Dynamic import with error boundary to handle WebGPU compatibility issues
const R3fGlobe = dynamic(
  () => import('r3f-globe').catch(() => {
    // Fallback component if r3f-globe fails to load
    return () => (
      <mesh>
        <sphereGeometry args={[1, 32, 32]} />
        <meshStandardMaterial color="#6366f1" wireframe />
      </mesh>
    );
  }),
  { 
    ssr: false,
    loading: () => null
  }
);

// Type for arc data
interface ArcData {
  startLat: number;
  startLng: number;
  endLat: number;
  endLng: number;
  color: string[];
}

interface GlobeVisualizationProps {
  className?: string;
  title?: string;
  description?: string;
  subtitle?: string;
  ctaText?: string;
  ctaLink?: Route<string>;
}

export const GlobeVisualization = ({
  className = '',
  title = 'Global AI Solutions',
  description = 'Connecting businesses worldwide with trusted AI implementation',
  subtitle = 'Bridging Trust AI',
  ctaText,
  ctaLink,
}: GlobeVisualizationProps) => {
  const containerRef = useRef<HTMLDivElement>(null);
  const [mounted, setMounted] = useState(false);
  const [hasError, setHasError] = useState(false);
  const { resolvedTheme } = useTheme();
  const isDarkMode = resolvedTheme === 'dark';

  // Animation constants
  const ROTATION_SPEED = 0.001;
  
  // Set default color based on theme
  const getDefaultColor = () => {
    return isDarkMode 
      ? ['#4F46E5', '#10B981'] // Indigo to Emerald for dark mode
      : ['#4338CA', '#0EA5E9']; // Indigo to Sky for light mode
  };
  
  // Define arc data
  const arcsData = useMemo<ArcData[]>(() => [
    { startLat: 37.7749, startLng: -122.4194, endLat: 51.5074, endLng: -0.1278, color: getDefaultColor() },
    { startLat: 35.6895, startLng: 139.6917, endLat: 40.7128, endLng: -74.0060, color: getDefaultColor() },
    { startLat: 1.3521, startLng: 103.8198, endLat: -33.8688, endLng: 151.2093, color: getDefaultColor() },
    { startLat: 19.0760, startLng: 72.8777, endLat: 55.7558, endLng: 37.6173, color: getDefaultColor() },
    { startLat: -23.5505, startLng: -46.6333, endLat: 48.8566, endLng: 2.3522, color: getDefaultColor() },
    { startLat: 25.2048, startLng: 55.2708, endLat: 1.3521, endLng: 103.8198, color: getDefaultColor() },
  ], [isDarkMode]);

  // Mount detection for client-side rendering
  useEffect(() => {
    setMounted(true);
  }, []);

  // Error boundary for the Canvas
  const handleError = () => {
    setHasError(true);
  };

  if (!mounted) {
    return (
      <div 
        className={`relative w-full h-[500px] bg-gray-100 dark:bg-gray-900 flex items-center justify-center ${className}`}
      >
        <div className="animate-pulse flex flex-col items-center">
          <div className="w-40 h-40 bg-gray-200 dark:bg-gray-800 rounded-full mb-6"></div>
          <div className="h-4 bg-gray-200 dark:bg-gray-800 rounded w-3/4 mb-2.5"></div>
          <div className="h-2 bg-gray-200 dark:bg-gray-800 rounded w-1/2"></div>
        </div>
      </div>
    );
  }
  
  return (
    <div 
      ref={containerRef}
      className={`relative w-full h-[500px] overflow-hidden ${className}`}
    >
      <div className="absolute inset-0 bg-gradient-to-r from-purple-50/30 to-blue-50/30 dark:from-gray-900/50 dark:to-purple-900/30 z-0" />
      
      {/* Globe Canvas with error handling */}
      <div className="absolute inset-0 z-10">
        <ErrorBoundary fallback={<SimpleSphereView isDarkMode={isDarkMode} />}>
          <Canvas camera={{ position: [0, 0, 220], fov: 45 }}>
            <ambientLight intensity={0.1} />
            <directionalLight 
              position={[1, 1, 1]} 
              intensity={0.6} 
              color={isDarkMode ? '#ffffff' : '#ffffff'} 
            />

            <Suspense fallback={null}>
              <R3fGlobe
                // Globe appearance
                showAtmosphere={true}
                atmosphereColor={isDarkMode ? '#3730a3' : '#c7d2fe'}
                atmosphereAltitude={0.1}
                globeImageUrl=""
                backgroundColor="rgba(0,0,0,0)"
                
                // Hide the actual globe surface to show only graticules
                showGlobe={false}
                
                // Grid lines (graticules)
                showGraticules={true}
                graticulesColor={isDarkMode ? '#6366f1' : '#818cf8'}
                
                // Arc configuration
                arcsData={arcsData}
                arcColor="color"
                arcDashLength={0.3}
                arcDashGap={0.1}
                arcDashInitialGap={() => Math.random()}
                arcDashAnimateTime={3000}
                arcStroke={0.5}
                arcAltitudeAutoScale={0.4}
                arcCurveResolution={64}
                
                // Auto-rotation
                autoRotate={true}
                autoRotateSpeed={ROTATION_SPEED}
              />
            </Suspense>
          </Canvas>
        </ErrorBoundary>
      </div>
      
      {/* Content overlay */}
      <div className="absolute inset-0 z-20 flex flex-col items-center justify-center p-6 text-center">
        <div className="max-w-2xl backdrop-blur-sm bg-white/20 dark:bg-gray-900/30 p-6 rounded-xl">
          {subtitle && (
            <p className="text-sm font-medium text-primary mb-2">{subtitle}</p>
          )}
          {title && (
            <h2 className="text-3xl md:text-4xl font-bold mb-4 text-gray-900 dark:text-white">
              {title}
            </h2>
          )}
          {description && (
            <p className="text-lg text-gray-700 dark:text-gray-300 mb-6 max-w-xl mx-auto">
              {description}
            </p>
          )}
          {ctaText && ctaLink && (
            <a 
              href={ctaLink as string}
              className="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md shadow-sm text-white bg-primary hover:bg-primary-dark transition-colors duration-300"
            >
              {ctaText}
            </a>
          )}
        </div>
      </div>
    </div>
  );
};

// Simple fallback view when Three.js/WebGL has issues
function SimpleSphereView({ isDarkMode }: { isDarkMode: boolean }) {
  return (
    <Canvas camera={{ position: [0, 0, 5], fov: 45 }}>
      <ambientLight intensity={0.5} />
      <directionalLight position={[2, 2, 2]} intensity={0.8} />
      <mesh rotation={[0, Math.PI / 4, 0]}>
        <sphereGeometry args={[1.5, 32, 32]} />
        <meshStandardMaterial 
          color={isDarkMode ? '#6366f1' : '#818cf8'} 
          wireframe={true}
          transparent={true}
          opacity={0.7}
        />
      </mesh>
    </Canvas>
  );
}

// Basic error boundary component
class ErrorBoundary extends React.Component<
  { children: React.ReactNode; fallback: React.ReactNode },
  { hasError: boolean }
> {
  constructor(props: { children: React.ReactNode; fallback: React.ReactNode }) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error: any) {
    return { hasError: true };
  }

  componentDidCatch(error: any, errorInfo: any) {
    console.error("Globe visualization error:", error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return this.props.fallback;
    }
    return this.props.children;
  }
}

export default GlobeVisualization; 